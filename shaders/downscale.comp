#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, rgba16f) readonly uniform image2D InputImage;
layout(binding = 1, rgba16f) writeonly uniform image2D OutputImage;

layout(std140, binding = 2) uniform DownscaleParams
{
	int InputMipLevel;
	int OutputMipLevel;
	vec2 InputSize;
	vec2 OutputSize;
} downscaleParams;


vec3 downsampleKaris(vec2 uv, vec2 texelSize)
{
	vec3 a = imageLoad(InputImage, ivec2((uv + vec2(-1.0, -1.0)) / texelSize)).rgb;
    vec3 b = imageLoad(InputImage, ivec2((uv + vec2(0.0, -1.0)) / texelSize)).rgb;
    vec3 c = imageLoad(InputImage, ivec2((uv + vec2(1.0, -1.0)) / texelSize)).rgb;
    vec3 d = imageLoad(InputImage, ivec2((uv + vec2(-0.5, -0.5)) / texelSize)).rgb;
    vec3 e = imageLoad(InputImage, ivec2((uv + vec2(0.5, -0.5)) / texelSize)).rgb;
    vec3 f = imageLoad(InputImage, ivec2((uv + vec2(-1.0, 0.0)) / texelSize)).rgb;
    vec3 g = imageLoad(InputImage, ivec2((uv + vec2(0.0, 0.0)) / texelSize)).rgb;
    vec3 h = imageLoad(InputImage, ivec2((uv + vec2(1.0, 0.0)) / texelSize)).rgb;
    vec3 i = imageLoad(InputImage, ivec2((uv + vec2(-0.5, 0.5)) / texelSize)).rgb;
    vec3 j = imageLoad(InputImage, ivec2((uv + vec2(0.5, 0.5)) / texelSize)).rgb;
    vec3 k = imageLoad(InputImage, ivec2((uv + vec2(-1.0, 1.0)) / texelSize)).rgb;
    vec3 l = imageLoad(InputImage, ivec2((uv + vec2(0.0, 1.0)) / texelSize)).rgb;
    vec3 m = imageLoad(InputImage, ivec2((uv + vec2(1.0, 1.0)) / texelSize)).rgb;

    vec3 result = (a + c + k + m) * 0.03125;  // corners
    result += (b + f + h + l) * 0.0625;       // edges
    result += (d + e + i + j) * 0.125;        // inner corners
    result += g * 0.25;                       // center

    return result;
}


void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 outputSize = downscaleParams.OutputSize;

    if(pixelCoord.x >= outputSize.x || pixelCoord.y >= outputSize.y)
        return;

    vec2 uv = (vec2(pixelCoord) + 0.5) / outputSize;
    vec2 inputTexelSize = 1.0 / downscaleParams.InputSize;
    vec3 color = downsampleKaris(uv, inputTexelSize);

    imageStore(OutputImage, pixelCoord, vec4(color, 1.0));
}
